                         
           ▄▄                                  
▀████▀     ██                                  
  ██                                           
  ██     ▀███ ▀████████▄ ▀███  ▀███ ▀██▀   ▀██▀
  ██       ██   ██    ██   ██    ██   ▀██ ▄█▀  
  ██     ▄ ██   ██    ██   ██    ██     ███    
  ██    ▄█ ██   ██    ██   ██    ██   ▄█▀ ██▄  
██████████████▄████  ████▄ ▀████▀███▄██▄   ▄██▄
                                               

///////////////////////////////////////////////////INTRO///////////////////////////////////////////////////////////////////////////////////////////

Before moving on to the LINUX lets have a small talk ☕️
An operating system (OS) is system software that manages computer hardware, software resources, and provides common services for computer programs.
Lets take a look at 1969 its time when ken Thompson and Dennnis Ritchie created unix operating system its was all good but it had one problem the 
source code was owned by AT and T company when some other created their own software distribution based on unix AT and T sues them this led to the 
limitatiins to the development. 

To encounter this problen in year 1983 Richard Stallman created GNU( it literally means not unix 😂) project intended to make free and open source 
replacement to unix in 1992 it included linux under GNU project under general public license, linux was created in 1991 by linus Torwalds a 
kernel which act as a mediater between hardware and applications, user interact with kernel with the help of shell through command line. in GNU's 
upcomming years it created may tols and applications like tar, bash just the name of few which can be used by linux kernel that let to revolution 
in software world.

As it gave freedom to developers tonnes of developers made their contributions and created thousand of linux distro A distro is a complete operating
system based on linux kernel which comes with linux kernel packages package-manager Graphic-user-interface. The family tree of linux is huge 
but have one thing in common tyhe seed of linux with  tools, utilities and freedom provided by GNU 

We will be understanding the basics of linux topics like core-concepts package-manager file-system networking storage secuerity-filepermissions
and many more. 😀

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

lets understand linux architecture ~


                |--------------------------------------------------------------------------------------------------------|
                |                                                                                                        |
                |                                                  user                                                  |
                |                                                                                                        |
                |      |----------------------------------------|        |----------------------------------------|      |
                |      |                                                                                          |      |
                |      |                              Applications / System utilities                             |      |
                |      |                                                                                          |      |
                |      |       |--------------------------------------------------------------------------|       |      |
                |      |       |                                                                          |       |      |
                |      |       |                                   Shell                                  |       |      |
                |      |       |                                                                          |       |      |
                |      |       |       |-----------------------------------------------------------|      |       |      |
                |      |       |       |                                                           |      |       |      |
                |      |       |       |                           kernel                          |      |       |      |
                |      |       |       |                                                           |      |       |      |
                |      |       |       |       |-------------------------------------------|       |      |       |      |
                |      |       |       |       |                                           |       |      |       |      |
                |      |       |       |       |                  Hardware                 |       |      |       |      |
                |      |       |       |       |                                           |       |      |       |      |
                |      |       |       |       |-------------------------------------------|       |      |       |      |
                |      |       |       |                                                           |      |       |      |
                |      |       |       |-----------------------------------------------------------|      |       |      |
                |      |       |                                                                          |       |      |
                |      |       |                                                                          |       |      |
                |      |       |--------------------------------------------------------------------------|       |      |
                |      |                                                                                          |      |
                |      |                                                                                          |      |
                |      |------------------------------------------------------------------------------------------|      |
                |                                                                                                        |
                |                                                                                                        |
                |--------------------------------------------------------------------------------------------------------| 

yeah ! I made the above digram myself 😎

We use shell to communicate with kernel, which communicates with hardware so, we indirectly communicate with the hardware using shell
The user cannot communicate with shell using magical spells 😂 hence the user interact with UI(user Interface) to communicate and interact.
There are mainly two types of User interface -  1.command line user interface 2.Graphic user interface 
The GUI uses the graphics while the CLI uses the commands aka instructions 

Now a questions may arise in your mind I have not encountered the command line user interface while using apps like file manager 
The thing is the those apps are interacting with shell for you under the hood while you use the app. 

To communicate and use the services we have to communicate with shell, as shell is CLI we will be exploring commands and concepts. 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Shell

As we discussed earlier we need to interact to with shell wit commands so, lets start the shell topic 😉

There are different types of shell available exmaple bash shell corn shell z shell bourne shell (ment for unix) and many more these shells are 
different and may serve special purpose in specific fields but all of them have one thing in common that they all act as a medium to interact with kernel 

👨🏽‍💻usage:To know which shell we are working with 
👨🏽‍💻type:echo $SHELL
👨🏽‍💻output:/bin/bash OR /bin/zsh OR /bin/ksh or any other based on the shell that have been installed 

👨🏽‍💻usage:To change shell         note: they must be installed in your system 
👨🏽‍💻type:chsh -s /bin/[ code name of the shell you wanna switch note: these square brackets are not needed these are just for instructing purpose]
👨🏽‍💻output:No effect but the shell will be changed but it will came into effect after you close the current session and start a new one.
👨🏽‍💻example:chsh -s /bin/bash

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
Commands: syntax and type 

Syntax:
You may notice that the instructions have a multiple parts these pare can be divided into three parts 
1.command
2.options 
3.arguments
Syntax: command <option> <argument> note:these crocodile brackets are just for instructing purpose

Type:
Commands can be divided into two main type
1.Builtin
2.External

👨🏽‍💻usage:To know type of command 
👨🏽‍💻type:type [command name note:these square brackets are just for instructing purpose they are not needed]
👨🏽‍💻output:It will output the type of command
👨🏽‍💻example:type echo

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

File
There's a commom phrase in linux that everything is a file so it is necessary to get really handy on em' 

File in linux are divided into 3 types 
1.Regular
2.Directory
3.Special

1.Regular files are the most basic files in linux they are data files or media files or scripts 
2.Directories are the files that store other files or directories 
3.Special files are further divided into 5 types 
3.1 Character files - these files represent devices under /dev that allows OS to communicate with IO devices   example - mouse
3.2 Block files - These files represent block devices under /dev a block device read from and write in block/chunk of data  example - hard disk, ram 
3.3 Links - these files are the way to associate two or more file name with same set of file data there are two types of links 
3.3.1 Hard Link - two or more files name that share the same block of data on a physical disk although they behave as a independent files deleting one 
link will delete the data 
3.3.2 Soft link - They act as pointers to another files deleting a soft link will not delete the actual file 
3.4 Socket - These file enable communication between two processes 
3.5 named pipes - These files are allows one process as the input to another Data flow in pipe is unidirectional 

File types and their identifiers 

  |------------------------------------|
  |  File               | identifiers  |
  |  Directory          |    d         |
  |  Regular            |    -         |
  |  Link               |    l         |
  |  Socket             |    s         |
  |  Pipe               |    p         |
  |  Character device   |    c         |
  |------------------------------------|


👨🏽‍💻usage:To check the file type 
👨🏽‍💻type:file [file name note:these square brackets are not needed these are ment for instructing purpose]
👨🏽‍💻output:the file type 
👨🏽‍💻example:file ~

Lets talk about file hiearchy in directories 


                                                            /(root)
                                                                |
                                                                |                                       
       ----------------------------------------------------------------------------------------------------------------------------------    
       |           |           |           |           |           |           |           |           |           |         |          |
       |           |           |           |           |           |           |           |           |           |         |          |
     /bin        /boot       /dev        /etc        /home       /lib       /media       /mnt        /opt        /tmp      /usr       /var

As we discussed above everything is a file in linux in linux there's a hiearchy of files in linux aka hiearchy of directories 
every directory has a parent directory except root directory from which all directories are being born off. When you open terminal you are found
to be in your home directory. this '/' represent parent the of a directory have a syntax like /parent1/parent1.1/parent1.1.1/........

👨🏽‍💻usage:To check the home directory 
👨🏽‍💻type:echo $HOME
👨🏽‍💻output:outputs the home directory
👨🏽‍💻example:echo $HOME
👨🏽‍💻note:home directory can be redirected simply by typing- cd or by typing- cd ~ or by typing- cd $HOME For single person there's only a only directory
under /home directory but for multi user there can be many directories under /home directory 


👨🏽‍💻usage:To check the current directory you are on 
👨🏽‍💻type:pwd
👨🏽‍💻output:outputs the current working directory
👨🏽‍💻example:pwd

👨🏽‍💻usage:To list the content of directories
👨🏽‍💻type:ls
👨🏽‍💻output:outputs the content of working directory
👨🏽‍💻example:ls

👨🏽‍💻usage:To switch directory 
👨🏽‍💻type:cd [directory name note:these square brackets are not needed these are just for instructing purpuse]
👨🏽‍💻output:switches to the directory you have typed 
👨🏽‍💻example:cd Desktop
👨🏽‍💻note:You cannot switch to any directory anywhere you wanted the directory you are switching to and the directory you are currently on must belong 
to the same parent, or you may provide absolute path of the intended directory 

👨🏽‍💻usage:To switch to parent of the current working directory / to traverse back of the hiearchy
👨🏽‍💻type:cd ..
👨🏽‍💻output:switches to the parent directory
👨🏽‍💻example:cd ..
👨🏽‍💻note:You can move back to parent directory till it reaches the root directory because root directory is the Adam of all directories 😂 you can 
also switch back by typing cd with the exact location of the parent directory 

👨🏽‍💻usage:To create directory
👨🏽‍💻type:mkdir [name of the directory you wanna create note:these square brackets are not needed these are just for instructing purpose]
👨🏽‍💻output:directory of the provided name will be created under its parent directory
👨🏽‍💻example:mkdir mydirectory

👨🏽‍💻usage:To create files except directory
👨🏽‍💻type:touch [filename.format  note:these square brackets are not needed these are just for instructing purpose ]
👨🏽‍💻output:The file with given name and format will be created under the current working directory
👨🏽‍💻example:touch myfile.txt

👨🏽‍💻usage:To delete directory
👨🏽‍💻type:rm -r [directory name note:thses square brackets are not needed ]
👨🏽‍💻output:All content inside the directory and the directory itself will be deleated 
👨🏽‍💻example:rmdir mydirectory
👨🏽‍💻note: to delete files except directory there's no neeed of -r this -r is ment for recursive purpose 


👨🏽‍💻usage:To move a file or directory
👨🏽‍💻type:mv [loation of the file which is to be transfered] [location of parent directory where it is to be transfered] 
👨🏽‍💻output:The file or dictory will be moved at the same time 
👨🏽‍💻example:rmdir mv a/b/c/4  /1/2/3/
👨🏽‍💻note: If the both location are same but the file name is different in that case the moving file or directory will be renamed as per as second name


👨🏽‍💻usage:To copy a file or directory
👨🏽‍💻type:mv [loation of the file which is to be copied] [location of parent directory where it is to be copied] 
👨🏽‍💻output:The file or dictory will be copied at the same time 
👨🏽‍💻example:rmdir mv a/b/c/d  /a/b/c/
👨🏽‍💻note: There might be a case when there are so much hiearchy of directory/file under the copying directory/file in that case -r can be used.


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////