                         
           ▄▄                                  
▀████▀     ██                                  
  ██                                           
  ██     ▀███ ▀████████▄ ▀███  ▀███ ▀██▀   ▀██▀
  ██       ██   ██    ██   ██    ██   ▀██ ▄█▀  
  ██     ▄ ██   ██    ██   ██    ██     ███    
  ██    ▄█ ██   ██    ██   ██    ██   ▄█▀ ██▄  
██████████████▄████  ████▄ ▀████▀███▄██▄   ▄██▄
                                               

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Introduction ~

Before moving on to the LINUX lets have a small talk ☕️
An operating system (OS) is system software that manages computer hardware, software resources, and provides common services for computer programs.
Lets take a look at 1969 its time when ken Thompson and Dennnis Ritchie created unix operating system its was all good but it had one problem the 
source code was owned by AT and T company when some other created their own software distribution based on unix AT and T sues them this led to the 
limitatiins to the development. 

To encounter this problen in year 1983 Richard Stallman created GNU( it literally means not unix 😂) project intended to make free and open source 
replacement to unix in 1992 it included linux under GNU project under general public license, linux was created in 1991 by linus Torwalds a 
kernel which act as a mediater between hardware and applications, user interact with kernel with the help of shell through command line. in GNU's 
upcomming years it created may tols and applications like tar, bash just the name of few which can be used by linux kernel that let to revolution 
in software world.

As it gave freedom to developers tonnes of developers made their contributions and created thousand of linux distro A distro is a complete operating
system based on linux kernel which comes with linux kernel packages package-manager Graphic-user-interface. The family tree of linux is huge 
but have one thing in common tyhe seed of linux with  tools, utilities and freedom provided by GNU 

We will be understanding the basics of linux topics like core-concepts package-manager file-system networking storage secuerity-filepermissions
and many more. 😀

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

lets understand linux architecture ~


                |--------------------------------------------------------------------------------------------------------|
                |                                                                                                        |
                |                                                  user                                                  |
                |                                                                                                        |
                |      |----------------------------------------|        |----------------------------------------|      |
                |      |                                                                                          |      |
                |      |                              Applications / System utilities                             |      |
                |      |                                                                                          |      |
                |      |       |--------------------------------------------------------------------------|       |      |
                |      |       |                                                                          |       |      |
                |      |       |                                   Shell                                  |       |      |
                |      |       |                                                                          |       |      |
                |      |       |       |-----------------------------------------------------------|      |       |      |
                |      |       |       |                                                           |      |       |      |
                |      |       |       |                           kernel                          |      |       |      |
                |      |       |       |                                                           |      |       |      |
                |      |       |       |       |-------------------------------------------|       |      |       |      |
                |      |       |       |       |                                           |       |      |       |      |
                |      |       |       |       |                  Hardware                 |       |      |       |      |
                |      |       |       |       |                                           |       |      |       |      |
                |      |       |       |       |-------------------------------------------|       |      |       |      |
                |      |       |       |                                                           |      |       |      |
                |      |       |       |-----------------------------------------------------------|      |       |      |
                |      |       |                                                                          |       |      |
                |      |       |                                                                          |       |      |
                |      |       |--------------------------------------------------------------------------|       |      |
                |      |                                                                                          |      |
                |      |                                                                                          |      |
                |      |------------------------------------------------------------------------------------------|      |
                |                                                                                                        |
                |                                                                                                        |
                |--------------------------------------------------------------------------------------------------------| 

yeah ! I made the above digram myself 😎

We use shell to communicate with kernel, which communicates with hardware so, we indirectly communicate with the hardware using shell
The user cannot communicate with shell using magical spells 😂 hence the user interact with UI(user Interface) to communicate and interact.
There are mainly two types of User interface -  1.command line user interface 2.Graphic user interface 
The GUI uses the graphics while the CLI uses the commands aka instructions 

Now a questions may arise in your mind I have not encountered the command line user interface while using apps like file manager 
The thing is the those apps are interacting with shell for you under the hood while you use the app. 

To communicate and use the services we have to communicate with shell, as shell is CLI we will be exploring commands and concepts. 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Commands: syntax and type 

Syntax:
You may notice that the instructions have a multiple parts these pare can be divided into three parts 
1.command
2.options 
3.arguments
Syntax: command <option> <argument> note:these crocodile brackets are just for instructing purpose

Type:
Commands can be divided into two main type
1.Builtin
2.External

👨🏽‍💻usage:To know type of command 
👨🏽‍💻type:type [command name note:these square brackets are just for instructing purpose they are not needed]
👨🏽‍💻output:It will output the type of command
👨🏽‍💻example:type echo

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Shell

As we discussed earlier we need to interact to with shell wit commands so, lets start the shell topic 😉

There are different types of shell available exmaple bash shell corn shell z shell bourne shell (ment for unix) and many more these shells are 
different and may serve special purpose in specific fields but all of them have one thing in common that they all act as a medium to interact with kernel 

👨🏽‍💻usage:To know which shell we are working with 
👨🏽‍💻type:echo $SHELL
👨🏽‍💻output:/bin/bash OR /bin/zsh OR /bin/ksh or any other based on the shell that have been installed 

👨🏽‍💻usage:To change shell         note: they must be installed in your system 
👨🏽‍💻type:chsh -s /bin/[ code name of the shell you wanna switch note: these square brackets are not needed these are just for instructing purpose]
👨🏽‍💻output:No effect but the shell will be changed but it will came into effect after you close the current session and start a new one.
👨🏽‍💻example:chsh -s /bin/bash

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

kernel ~

Kernel is major component of an opreating system its sits between hardware and applications/processes it manages resources as efficient as possible 
Kernel carries out four major tasks 
1.Memory management 
2.Process management 
3.Device drivers 
4.System calls and secuerity

The linux kernel is monolithic it means it carries out multiple tasks all by itself 
The linux kernel is modular it means it can extend its capiblities using dynamicially loaded kernel modules 

Lets check about kernel info 

👨🏽‍💻usage:To know the kernel info
👨🏽‍💻type:echo uname
👨🏽‍💻output:Name of the kernel will be printed 

👨🏽‍💻usage:To know the kernel info including the major version and minor version and patch release 
👨🏽‍💻type:echo uname -a 
👨🏽‍💻output:Info of the kernel will be printed
👨🏽‍💻example: 4.15.0-72-generic 
The first number tells about the current version
The second number tells about the major version
The third number tells about patch release 
The fourth word tells about the type of the kernel this is distro specific 

Kernel and user space ~

The memory is divided into two parts 1.kernel space and user space 

Kernel space is composed of device drivers and kernel they have unrestricted acecess to the hardware to kernel items like kernel code kernel 
extensions which executes and provides it services

User space is the second component of the main memory it have restricted acces to the hardware it comes with all kind of tools and programming 
languages graphical tools and other things like java ruby c python and docker containers etc.

All user programs function by manipulating data which comes from hardware like disk, user programs made special request to the kernel call system 
calls example open or write a file etc, this system call make kernel to provide resourcs to program. 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Linux boot sequence ~
Although you have have booted your system and are working on it 🌚 lets discusss a steps involved in this task 

Linux boot sequence can be divided into four major groups ~
1. BIOS post
2. GRUB loader/ Boot loader 
3. Kernel initilization
4. INTIT process (systemd)

BIOS POST ~
POST(Power On Self Test) in this stage BIOS runs a post test to insure that all the hardware components attached to the device are working correctly
if POST fails compuetr may not be operatble and computer will not move to second step of boot process. 

Boot loader ~
After the POST sequence BIOS load and executes the boot code from the hard disk of the boot device, located in the first sector of the hard disk  
In linux this code os located in the /boot file system The boot loader provide user with the boot screen often  with multiple os to boot into.
Once the choice is provided the boot loader loades the kernel into the memory. Supplying with parameters and handling the control to the kernel 
Example of the boot loader is GRUB 2(Grand Unified Boot Loader version 2) it is primary boot loader for most of the linux distributions.

Kernel Initilization ~
The kernel loaded into the memory is usually decompressed then the kernel loads into the memory and starts executing during this time kernel carries 
out tasks such as initilizing hardware, cpu sheduling and memory management etc.

INIT ~
When the kernel gets compleated operational kernel goes for INIT process this process sets up user space and processes needed for user environment

In most of the linux distributions INIT process later calls the systemd, it is responsible for broinging linux host into the useable space, mounting
filesystems starting and managing system services like systemd sys5 is used systemd has one advantage than sys5 is that it paralizes the services 
which are not necessary thus decreasing the startup time 

👨🏽‍💻usage:To know the the INIT process used 
👨🏽‍💻type:ls -l /sbin/init
👨🏽‍💻output:Name of the init process used will be printed

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Runlevel ~
Run level in a nutshell can be defined as user target implemented on the system i.e interface your system boots into , during boot process it checks
the run level and insures that all services that are required for the runlevel are working fine.

There are various kind of run level implemented on the system list of them are ~
runlevel 0 -> poweroff.target

runlevel 1 -> rescue.target

runlevel 2 -> multi-user.target

runlevel 3 -> multi-user.target

runlevel 4 -> multi-user.target

runlevel 5 -> graphical.target

runlevel 6 -> reboot.target

👨🏽‍💻usage:To know the the current runlevel
👨🏽‍💻type:systemctl get-default
👨🏽‍💻output:The target of the system will be printed 

👨🏽‍💻usage:To know the the current runlevel
👨🏽‍💻type:systemctl set-default [name].target
👨🏽‍💻output:The target of the system will changed according to the name provided 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Working with hardware ~

👨🏽‍💻usage:To get messages generated by the kernel 
👨🏽‍💻type:dmesg
👨🏽‍💻output:When an operatin g system boots ucp there are tonnes of messages generated by the kernel that appear on the screen these messages contains 
logs and other informational stuff this command is used to print all those messages 

👨🏽‍💻usage:Prints about the messages od uevents generated by the kernel 
👨🏽‍💻type:udevadm monitor 
👨🏽‍💻output:This listens to the kernel uevents and upon decting an event it prints the details onto the screen. 

👨🏽‍💻usage:List all pci devices that are configured to the system along with their information
👨🏽‍💻type:lspci
👨🏽‍💻output:This command will print information of the all pci(Peripheral Component Interconnects primary purpose is to facilitate communication of 
hardware devices of all types such as audio, video, network or graphics with the microprocessor) devices that are configured  in the system.

👨🏽‍💻usage:List all the block devices along with their information  
👨🏽‍💻type:lsblk
👨🏽‍💻output: List all the block devicecs along with their information 

👨🏽‍💻usage:To get information about cpu architecture 
👨🏽‍💻type:lscpu
👨🏽‍💻output:information including no of core,threads,sockets and generation etc will be printed on the  screen 

👨🏽‍💻usage:List the information about memory
👨🏽‍💻type:lsmem --summary
👨🏽‍💻output:Print the summary of the memory i.e how much ram is occuied and how much ram is free there and another command that do the same thing ~
free -m 
In the above command -m is used to get information in megabytes -g can be used to get information in gigabytes and -k is used to get information 
in kili bytes can be used along with size options to get small summary. 

👨🏽‍💻usage:To get information about hardware
👨🏽‍💻type:lshw
👨🏽‍💻output:This command will print all the  information about hardware configure on to the system.

👨🏽‍💻usage:To get the root user privilages  
👨🏽‍💻type:sudo <command> 
👨🏽‍💻output: There are so many command that require root user privilages to run gosh there a easy methos use sudo before command to get root privilages
every time you use sudo password is required  

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

File ~

There's a commom phrase in linux that everything is a file so it is necessary to get really handy on em' 

File in linux are divided into 3 types 
1.Regular
2.Directory
3.Special

1.Regular files are the most basic files in linux they are data files or media files or scripts 
2.Directories are the files that store other files or directories 
3.Special files are further divided into 5 types 
3.1 Character files - these files represent devices under /dev that allows OS to communicate with IO devices   example - mouse
3.2 Block files - These files represent block devices under /dev a block device read from and write in block/chunk of data  example - hard disk, ram 
3.3 Links - these files are the way to associate two or more file name with same set of file data there are two types of links 
3.3.1 Hard Link - two or more files name that share the same block of data on a physical disk although they behave as a independent files deleting one 
link will delete the data 
3.3.2 Soft link - They act as pointers to another files deleting a soft link will not delete the actual file 
3.4 Socket - These file enable communication between two processes 
3.5 named pipes - These files are allows one process as the input to another Data flow in pipe is unidirectional 

File types and their identifiers 

  |------------------------------------|
  |  File               | identifiers  |
  |  Directory          |    d         |
  |  Regular            |    -         |
  |  Link               |    l         |
  |  Socket             |    s         |
  |  Pipe               |    p         |
  |  Character device   |    c         |
  |------------------------------------|


👨🏽‍💻usage:To check the file type 
👨🏽‍💻type:file [file name note:these square brackets are not needed these are ment for instructing purpose]
👨🏽‍💻output:the file type 
👨🏽‍💻example:file ~

Lets talk about file hiearchy in directories 


                                                             /(root)
                                                                |
                                                                |                                       
       ----------------------------------------------------------------------------------------------------------------------------------    
       |           |           |           |           |           |           |           |           |           |         |          |
       |           |           |           |           |           |           |           |           |           |         |          |
     /bin        /boot       /dev        /etc        /home       /lib       /media       /mnt        /opt        /tmp      /usr       /var

As we discussed above everything is a file in linux in linux there's a hiearchy of files in linux aka hiearchy of directories 
every directory has a parent directory except root directory from which all directories are being born off. When you open terminal you are found
to be in your home directory. this '/' represent parent the of a directory have a syntax like /parent1/parent1.1/parent1.1.1/........


👨🏽‍💻usage:To check the home directory 
👨🏽‍💻type:echo $HOME
👨🏽‍💻output:outputs the home directory
👨🏽‍💻example:echo $HOME
👨🏽‍💻note:home directory can be redirected simply by typing- cd or by typing- cd ~ or by typing- cd $HOME For single person there's only a only directory
under /home directory but for multi user there can be many directories under /home directory 


👨🏽‍💻usage:To check the current directory you are on 
👨🏽‍💻type:pwd
👨🏽‍💻output:outputs the current working directory
👨🏽‍💻example:pwd


👨🏽‍💻usage:To list the content of directories
👨🏽‍💻type:ls
👨🏽‍💻output:outputs the content of working directory
👨🏽‍💻example:ls


👨🏽‍💻usage:To switch directory 
👨🏽‍💻type:cd [directory name note:these square brackets are not needed these are just for instructing purpuse]
👨🏽‍💻output:switches to the directory you have typed 
👨🏽‍💻example:cd Desktop
👨🏽‍💻note:You cannot switch to any directory anywhere you wanted the directory you are switching to and the directory you are currently on must belong 
to the same parent, or you may provide absolute path of the intended directory 


👨🏽‍💻usage:To switch to parent of the current working directory / to traverse back of the hiearchy
👨🏽‍💻type:cd ..
👨🏽‍💻output:switches to the parent directory
👨🏽‍💻example:cd ..
👨🏽‍💻note:You can move back to parent directory till it reaches the root directory because root directory is the Adam of all directories 😂 you can 
also switch back by typing cd with the exact location of the parent directory 


👨🏽‍💻usage:To create directory
👨🏽‍💻type:mkdir [name of the directory you wanna create note:these square brackets are not needed these are just for instructing purpose]
👨🏽‍💻output:directory of the provided name will be created under its parent directory
👨🏽‍💻example:mkdir mydirectory


👨🏽‍💻usage:To create files except directory
👨🏽‍💻type:touch [filename.format  note:these square brackets are not needed these are just for instructing purpose ]
👨🏽‍💻output:The file with given name and format will be created under the current working directory
👨🏽‍💻example:touch myfile.txt


👨🏽‍💻usage:To delete directory
👨🏽‍💻type:rm -r [directory name note:thses square brackets are not needed ]
👨🏽‍💻output:All content inside the directory and the directory itself will be deleated 
👨🏽‍💻example:rmdir mydirectory
👨🏽‍💻note: to delete files except directory there's no neeed of -r this -r is ment for recursive purpose 


👨🏽‍💻usage:To move a file or directory
👨🏽‍💻type:mv [loation of the file which is to be transfered] [location of parent directory where it is to be transfered] 
👨🏽‍💻output:The file or dictory will be moved at the same time 
👨🏽‍💻example:rmdir mv a/b/c/4  /1/2/3/
👨🏽‍💻note: If the both location are same but the file name is different in that case the moving file or directory will be renamed as per as second name


👨🏽‍💻usage:To copy a file or directory
👨🏽‍💻type:mv [loation of the file which is to be copied] [location of parent directory where it is to be copied] 
👨🏽‍💻output:The file or dictory will be copied at the same time 
👨🏽‍💻example:rmdir mv a/b/c/d  /a/b/c/
👨🏽‍💻note: There might be a case when there are so much hiearchy of directory/file under the copying directory/file in that case -r can be used.


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Package Manager ~
A package is a archive/files all the files that are required by a particular software. A package manager is a software that provides package + 
dependencies along with tasks like ~

checking authenticity and integrity
Simplying the package management process 
Grouping packages 
Managing dependicies 

Every distributions may have a seperate package manager because distributions may differ in basic structure thus every different structure require 
different package manager Just like we talked earlier there are around a thousand of linux distributions but the big daddy of these distributions are 
DPKG/APT and RPM DPKG is used by linux os like ubantu,debian,arch linux linux mint etc. RPM is used bu RHEL,fedora,cent os etc. The most usual package 
manager used by mac os is home brew. 

RPM(red hat package manager) ~

                                   --------------------------------------------
                                   |  install   |   rpm -ivh packagename.rpm  |
                                   |  unistall  |   rpm -e packagename.rpm    |
                                   |  upgrade   |   rpm -Uvh packagename.rpm  |
                                   |  query     |   rpm -q packagename.rpm    |
                                   |  verify    |   rpm -Vf path-to-file      |
                                   --------------------------------------------

YUM(yellow dog updater modifier) ~

Despite all of these RPM does not manage dependencies by itself so we need a better package manager hopefully there a package manager called YUM this 
package manager works on RPM based distros It is a high level package manager but still works with RPM under the hood YUM deals with automatic 
dependencies management. 

To install dependencies it works with dependencies packages they may stored on local or are available on remote server accessed via server protocalls.
In your loacal system you can find those dependicies file on etc/yum.repos.d/dependencies-files you can adde any dependicies file here in case you wanna 
install unofficial updates of any modifications.

👨🏽‍💻usage:To list all the installed repos
👨🏽‍💻type:yum repolist
👨🏽‍💻output:All the repos added to the system will be displayed 
👨🏽‍💻example:yum repolist

👨🏽‍💻usage:To find what dependencies is provided to a application 
👨🏽‍💻type:yum provides package-name 
👨🏽‍💻output:All the dependencies provided to the application will be displayed 
👨🏽‍💻example:yum provides scp 

                                   ----------------------------------------------
                                   |  install   |   yum install packagename     |
                                   |  unistall  |   yum remove packagename      |
                                   |  update    |   yum update packagename      |
                                   ----------------------------------------------

Steps involved in installing a package ~

yum first checks the transaction check it check repositories of that package it also check if any of the dependincy package installed in system 
or it needs to be upgraded. After all that it displays transaction summary and asks the choice to further go on. After that choice yum downloads 
the packages 

DPKG(debian package manager) ~

                                   --------------------------------------------
                                   |  install   |   dpkg -i packagename.deb   |
                                   |  unistall  |   dpkg -r packagename.deb   |
                                   |   list     |   dpkg -l packagename       |
                                   |  status    |   dpkg -s packagename       |
                                   |  verify    |   dpkg -p path to package   |
                                   --------------------------------------------

Just like RPM it does not handle dependencies on its own so a better package manager is required just like YUM, it also works with dpkg under the hood

apt(advance package manager) ~
To install dependencies it can be done by packages stored on local or it may install from remote server by connection using server protocalls its 
packages can be find at /etc/sources.list/ 

                                   ---------------------------------------------------
                                   |  install        |   apt install packagename     |
                                   |  unistall       |   apt remove packagename      |
                                   |  referesh repo  |   apt update                  |
                                   | install upgrade |   apt upgrade                 |
                                   |  search         |   apt search packagename      |
                                   |  upgrade 2.0    |   apt edit-sources            |
                                   ---------------------------------------------------

APT vs APT-GET ~

APT is more user friendly than apt-get as apt-ge3t prints more details that are not necessary and are useless  
                                  
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

File compression and archive ~

Checking disk usage ~

👨🏽‍💻usage:To check the size of file 
👨🏽‍💻type:du -sh filename.fileformat
👨🏽‍💻output:outputs the the size of the file in human readable format
👨🏽‍💻example:98M shit.txt
👨🏽‍💻note: Multiple options can be used like -g for getting file size in gigabytes -m getting file size in megabytes -k getting file size in kilobytes 

File archival ~

TAR is used to group multiple directories and file into single file aka taped archive 

👨🏽‍💻usage:To archive data 
👨🏽‍💻type:tar -cf name_of_compressed_file_you_wanna_name.tar file1 file2 file3 
👨🏽‍💻output:All data will be archived and made into a new file named given by you with an extension of .tar 
👨🏽‍💻example:tar -cf  secrets.tar nukes.txt hitlernumber.txt 
👨🏽‍💻note: -c option is used for compressing files and -f is used for specifying the name of compressed file  

👨🏽‍💻usage:To display the contents of the archive file 
👨🏽‍💻type:tar -tf filename.tar
👨🏽‍💻output:Files and folders that tar file composed of will be printed 
👨🏽‍💻example:tar -tf  secrets.tar 

👨🏽‍💻usage:To extract the tar file 
👨🏽‍💻type:tar -xf filename.tar
👨🏽‍💻output:Files and folders that tar file composed will be extracted
👨🏽‍💻example:tar -xf  secrets.tar

👨🏽‍💻usage:To archive data with reduction in size of tar file 
👨🏽‍💻type:tar -zcf name_of_compressed_file_you_wanna_name.tar file1 file2 file3 
👨🏽‍💻output:All data will be archived and made into a new file named given by you with an extension of .tar 
👨🏽‍💻example:tar -zcf  secrets.tar nukes.txt hitlernumber.txt 
👨🏽‍💻note: -c option is used for compressing files and -f for file name 

File compression ~

Apart from archival there are various ways to compress a file based on different algorithms there are multiple commands 

👨🏽‍💻usage:To compress a file 
👨🏽‍💻type:bzip2 filename.fileformat
👨🏽‍💻output:compressed file will be saved and with a extra extension of bz2
👨🏽‍💻example:bzip2 compressed.txt

👨🏽‍💻usage:To decompress a file 
👨🏽‍💻type:bunzip2 filename.fileformat.bz2
👨🏽‍💻output:file will be decompressed  
👨🏽‍💻example:bunzip2 compressed.txt.bz2

👨🏽‍💻usage:To compress a file 
👨🏽‍💻type:gzip filename.fileformat
👨🏽‍💻output:compressed file will be saved and with a extra extension of gz
👨🏽‍💻example:gzip compressed.txt

👨🏽‍💻usage:To decompress a file 
👨🏽‍💻type:gunzip filename.fileformat.gz
👨🏽‍💻output:file will be decompressed 
👨🏽‍💻example:gunzip compressed.txt.gz

👨🏽‍💻usage:To compress a file 
👨🏽‍💻type:xz filename.fileformat
👨🏽‍💻output:compressed file will be saved and with a extra extension of xz
👨🏽‍💻example:xz compressed.txt

👨🏽‍💻usage:To decompress a file 
👨🏽‍💻type:unxz filename.fileformat.xz
👨🏽‍💻output:file will be decompressed
👨🏽‍💻example:unxz compressed.txt.xz

There is no need of everytime decompressing a file to read its content it can be done using 

zcat / bzcat / xzcat

locate file ~

👨🏽‍💻usage:To locate a file  
👨🏽‍💻type:locate filename.fileformat
👨🏽‍💻output:All the files that share the same name heir paths will be printed 
👨🏽‍💻example:locate 1.1.txt
👨🏽‍💻note:It may notr work on systems because it works on data base to update the data base of the locations type updatedb command 

👨🏽‍💻usage:To locate a file  
👨🏽‍💻type:find directory-in-you-wanna-search -name filename.fileformat
👨🏽‍💻output:All the files that share the same name heir paths will be printed 
👨🏽‍💻example:find akashagarwal -name 1.1.txt

Search data in files ~

👨🏽‍💻usage:To search data in a file  
👨🏽‍💻type:grep data filename.fileformat
👨🏽‍💻output:All the lines that contains the provided data will print. 
👨🏽‍💻example:gerp second 1.1.txt

👨🏽‍💻usage:To search data in a file  regardless its case sesnitiveness
👨🏽‍💻type:grep -i data filename.fileformat
👨🏽‍💻output:All the lines that contains the provided data will print. 
👨🏽‍💻example:gerp -i second 1.1.txt

👨🏽‍💻usage:To search files that contains the data provided 
👨🏽‍💻type:grep -r "data" directory-location
👨🏽‍💻output:All the files that contains the provided data will print. 
👨🏽‍💻example:gerp -r "second" /nuclearcodes/asia

👨🏽‍💻usage:To search lines that do not contains the data provided  
👨🏽‍💻type:grep -v "data" filename.fileformat
👨🏽‍💻output:All the lines that do not contains the provided data will print. 
👨🏽‍💻example:gerp -v "sixtynine" codes.txt

All these above data searching command have one thing in common that they print the lines/files that conatins even a part of data provided 
to make things more specific -w option is used 

👨🏽‍💻usage:To search line that contains the data provided extact data 
👨🏽‍💻type:grep -w data filename.fileformat
👨🏽‍💻output:All the line contains the exact provided data will print. 
👨🏽‍💻example:gerp -w zerozeroseven codes.txt

There might be a case you wanna se what line lies above the answer or what lines below the answer to fulfil this wish -A and -B options was born 

👨🏽‍💻usage:To print the n number of lines above the desired index being completely independent of the pattern searched 
👨🏽‍💻type:grep -A(NUMBER-OF-LINES-YOU-WANNA-PRINT-ABOVE) data filename.fileformat
👨🏽‍💻output:All the line contains the provided data will print along with the numbers of lines provided will print above it. 
👨🏽‍💻example:gerp -A1 zerozeroseven codes.txt

👨🏽‍💻usage:To print the n number of lines below the desired index being completely independent of the pattern searched 
👨🏽‍💻type:grep -A(NUMBER-OF-LINES-YOU-WANNA-PRINT-BELOW) data filename.fileformat
👨🏽‍💻output:All the line contains the provided data will print along with the numbers of lines provided will print below it. 
👨🏽‍💻example:gerp -B1 zerozeroseven codes.txt

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IO direction ~

There are three data streams created when a command is launched 

Standard input - This stream accepts text as its input 
Standard output - The output generated is delived by this stream 
Standard error - This stream delivers in case the given command is incorrect 

👨🏽‍💻usage:To redirect the output and store in it a file 
👨🏽‍💻type:echo "data" > filename.fileformat 
👨🏽‍💻output:The data in the doubble quotes will overwrite the previous data and get store in the given file  
👨🏽‍💻example:echo "420690071945" > nuclearcode.txt
👨🏽‍💻note:This > will overwrite the data with the given data to make previous data immmutable >> can be used if the file does not exist a new one will be 
created 

If you wanna type and save content at the same time these command are used 

👨🏽‍💻usage:To redirect the input to store in a file  
👨🏽‍💻type:cat > filename.fileformat 
👨🏽‍💻output:After this command given there will free typing to exit that free typing type control+c all the contents will be saved 
👨🏽‍💻example:cat > nuclearcode.txt
👨🏽‍💻note:This > will overwrite the data with the given data to make previous data immmutable >> can be used if the file does not exist a new one will be 
created 

👨🏽‍💻usage:To redirect the output of the wrong command in a file
👨🏽‍💻type:cat command-that-casued-error 2> filename.fileformat 
👨🏽‍💻output:The error generated by the given command will be saved to the file 
👨🏽‍💻example:cat launch 2> nuclearcode.txt
👨🏽‍💻note:This > will overwrite the data with the given data to make previous data immmutable >> can be used if the file does not exist a new one will be 
created 

We can make output of one command to the input for the second command 

👨🏽‍💻usage:To execute merege two command  
👨🏽‍💻type:command1 | command2
👨🏽‍💻output:If the output of the first command is suitable for the second both will execute
👨🏽‍💻example: grep -i no 1.1.txt | less

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Console based text editors ~

The real chads uses the console base text editors like vi editor 

👨🏽‍💻usage:To see the contents of a file in vi editor 
👨🏽‍💻type:vi filename.fileformat
👨🏽‍💻output:All the data of the file will print in the vi editor 
👨🏽‍💻example:vi nuclearcodes.txt

The legendary vi editor have three modes 
Command - the default mode in vi editor is command move we can type command such as cp mv etc 
Insert  - this mode allows us to edit data aka add test delete text 
Last line - After getting our work done press esc key and : to switch to last line ~~ the escape key makes user go into command mode and :
takes user to last line. after reaching the last line we have options either to save/discard and exit vi editor 

Command mode : 
Press escape key for entering into command mode 
Lets gets handy with the comand mode ~
arrow up/k     for cursor up 
arrow down/j   for cursor down
arrow left/h   for cursor left 
arrow right/l  for cursor right
To copy and paste a line just press y two times on the first alphabet of the desired line and press p on desired place where you want to paste it.
To delete a letter just press x on the highlighted cursor
To delete the desired line just press d two times on the first alphabet of that line 
To delete the number of lines including the current type d n d   (n is the number of lines)
To redo the task press ctrl+r 
To undo the task press u 
To move cursor to the searched or desired part press /sequence-of-Character to search pattern above type ?sequence-of-Character
To find the above pattern above he current line press N and for the below press n

Insert mode :
Press i to enter into insert mode or o or a 
To make any changes first going into command mode is necessary 
To save the changes after editing press ~ escape : w
To save the changes and extit press ~ escape : wq 
To exit without making changes press ~ escape : q !

The real sigma males uses vim editor Vim is the dad of vi in terms of qualities it includes spell check, plugins, comparison, merging, gui etc. 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Secuerity and file permissions ~

Every user in linux has an account associated with linux aka have an user name and a password apart from both of these user also have a uid 
you can find these informaton in /etc/passwd A group of users that share the same system can be grouped together this group is found in /etc/group
The users in the group have a unique GID If the user is not a part if any group the user is added to a group with same GID as UID.
Sudo is used to get super user privilages the powers provided can be edited as the description of it lies in the /etc/sudoers 

👨🏽‍💻usage:To get information about user 
👨🏽‍💻type:id
👨🏽‍💻output:The name ID GID and groups in which user a part of will be printed 
👨🏽‍💻example:id

Account types ~
User account: used by user 
Super user account: root UID=0
System accounts: created and used by the system and not find under home directory UID<100 or 500-1000
service accounts: accounts used by services 

👨🏽‍💻usage:To get to know about account which is logged into the system 
👨🏽‍💻type:who
👨🏽‍💻output:The accounts loggged into the computer will print
👨🏽‍💻example:who

👨🏽‍💻usage:To get record of the all logged in users 
👨🏽‍💻type:last
👨🏽‍💻output:The accounts that previously loggged into the computer will print
👨🏽‍💻example:last

User management ~

As we discussed earlier that every user have a uid gid passwd at the same time may or maybe part of other groups there are commands to manage users 

👨🏽‍💻usage:To add another user to the system 
👨🏽‍💻type:useradd user-name 
👨🏽‍💻output:The user will be added to the system it can be seen uder /etc/passwd at default that account will be provided with GID and UID 
👨🏽‍💻example:useradd myselfakashagarwal 
👨🏽‍💻note:once logged in user can check itself by typing whoami 

The adding a user to the system is done above is the simplest way there's the correct more advanced way to do it with custom UID and GID and 
many more 

👨🏽‍💻usage:To add another user to the system 
👨🏽‍💻type:useradd -u custom-uid -g custom-gid -d /custom-directory -s /bin/custom-shell -c "custom-comments" name-of-the-user 
👨🏽‍💻output:The user will be added to the system it can be seen uder /etc/passwd at default that account will be provided with GID and UID 
👨🏽‍💻example:useradd myselfakashagarwal 
👨🏽‍💻note:once logged in user can check itself by typing whoami 

-u is used for giving custom UID to user example 69,420,1945,2002 aka user defined 
-g is used for giving custom GID to user example 69,420,1945,2002 aka user defined
-d is used for providing the custom home directory example /home/users/myselfakashagarwal
-s is used for providing the default shell example /bin/bash, /bin/sh, /bin/zsh 
-c is used for custom comments 
others can also be used like 
-e is used for expiration date 
-G is used for creating a user with multiple secondary groups 
at last there's  name of the user  

If you wanna see the details of the user just grep -i user-name /etc/passwd

👨🏽‍💻usage:To remove user from the system 
👨🏽‍💻type:userdel user-name 
👨🏽‍💻output:That user will be deleated 
👨🏽‍💻example:userdel god

👨🏽‍💻usage:To add a group to the system 
👨🏽‍💻type:groupadd -g group-id group-name  
👨🏽‍💻output:Group will be created with the given GID 
👨🏽‍💻example:groupadd -g 1983 GNU

👨🏽‍💻usage:To remove group from the system 
👨🏽‍💻type:groupdel group-name 
👨🏽‍💻output:That group will be deleated 
👨🏽‍💻example:groupdel AT&T

Access control files ~

Majority of access control files aree stored in /etc directory read:everyone write:root 

/etc/passwd this file contains the information about the user and the system including UID GID HOME SHELL GROUPS but this file does not contain 
passwords there are multiple feilds seperated by : 
USERNAME:PASSWORD:UID:GID:GECOS:HOMEDIR:SHELL
USERNAME~Name of the user using the system 
PASSWORD~x aka this field resemble x as the password is stored in /etc/shadow 
UID~User id of the user 
GID~Group id of the user 
GECOS~This is exceptional this may store user details like phone number etc 
HOMEDIR~This field represent location of home directory of the user 
SHELL~This field represent the default shell used by the user  

/etc/shadow passwords are stored in this file they are not readable aka contents of this file are hashed feilds in /etc/shadow are 
USERNAME:PASSWORD:LASTCHANGE:MINAGE:MAXAGE:WARN:INACTIVE:EXPDATE
USERNAME~User name of the user 
PASSWORD~Password of the user but in hashed format @empty field means the passwd was never set for the user 
LASTCHANGE~The date since the user last changed its password (the date format is in epic )
MINAGE~The minimum number of days user have to wait to reset the password 
MAXAGE~The maximum number of days the current pasword will last 
WARN:The number of days remaining till this password will last 
INACTIVE~The number of days even after the expiray of the passwd that password will be accepted 
EXPDATE~Date at which the user account will be expired 

/etc/group this file stores all the information of the groups like GID MEMBERS fields of this file are ~
NAME~Group name 
PASSWORD~Password of the user indicating x 
GID~Group id 
MEMBERS~Members the group is part of 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////